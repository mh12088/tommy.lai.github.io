import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/internal/Observable';
import { DecodedAttestionObj } from '../model/web-authn.model';
import { MockService } from './mock-service';
import * as CBOR from '../utils/cbor';
@Injectable()
export class TestService {
    private url = '';
    private baseUrl = 'http://localhost:8080';
    constructor(public http: HttpClient, private mockService: MockService) {
    }
    mockData: any = {
        "rawId": "9VV9hvzNLUwsivnss8jRvuAfbZ0",
        "response": {
            "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiWXpNNFlUTXpaalV0TXpka1ppMDBOell4TFdFMlltWXROR0l3WmpJd01ERTBNbU5oIiwib3JpZ2luIjoiaHR0cHM6Ly9taDEyMDg4LmdpdGh1Yi5pbyJ9",
            "attestationObject": "o2NmbXRlYXBwbGVnYXR0U3RtdKFjeDVjglkCRzCCAkMwggHJoAMCAQICBgF92_bwITAKBggqhkjOPQQDAjBIMRwwGgYDVQQDDBNBcHBsZSBXZWJBdXRobiBDQSAxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMB4XDTIxMTIyMDA3NDg1M1oXDTIxMTIyMzA3NDg1M1owgZExSTBHBgNVBAMMQDM5MGM1OThmNjFhZGEyNjFhMGMzMjkxNjA3MjNiMjZmNjBjMDZhMjM3ODcxNTkzMjgyN2RlYzUwNDhkNWZlNjgxGjAYBgNVBAsMEUFBQSBDZXJ0aWZpY2F0aW9uMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEKQD79-GZrmE9sJoNXicgksjkecZ6C4S8pLZ_8K4tnyB4_o7RK_AnYzETy94VCDuqWGAfc-Z1eQR73D45kEMP4aNVMFMwDAYDVR0TAQH_BAIwADAOBgNVHQ8BAf8EBAMCBPAwMwYJKoZIhvdjZAgCBCYwJKEiBCAASnNXJq3GOtvKP5w0j3ZKS9kUD5c4pp0azxMi3KoAMjAKBggqhkjOPQQDAgNoADBlAjEAsIW5msSUwwq1ZQD2IuddhUOH7kNHiOZ_xliwz8xUB5sfsLPPzkWroJ0L59A8yVoJAjB2Ay1Pq3OQgJv6-UY5-DmzkW1l7zsfMkGtVQ9Jiw72jjYA2Ci2Vo7vOHW-R-c78iVZAjgwggI0MIIBuqADAgECAhBWJVOVx6f7QOviKNgmCFO2MAoGCCqGSM49BAMDMEsxHzAdBgNVBAMMFkFwcGxlIFdlYkF1dGhuIFJvb3QgQ0ExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMjAwMzE4MTgzODAxWhcNMzAwMzEzMDAwMDAwWjBIMRwwGgYDVQQDDBNBcHBsZSBXZWJBdXRobiBDQSAxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEgy6HLyYUkYECJbn1_Na7Y3i19V8_ywRbxzWZNHX9VJBE35v-GSEXZcaaHdoFCzjUUINAGkNPsk0RLVbD4c-_y5iR_sBpYIG--Wy8d8iN3a9Gpa7h3VFbWvqrk76cCyaRo2YwZDASBgNVHRMBAf8ECDAGAQH_AgEAMB8GA1UdIwQYMBaAFCbXZNnFeMJaZ9Gn3msS0Btj8cbXMB0GA1UdDgQWBBTrroLE_6GsW1HUzyRhBQC-Y713iDAOBgNVHQ8BAf8EBAMCAQYwCgYIKoZIzj0EAwMDaAAwZQIxAN2LGjSBpfrZ27TnZXuEHhRMJ7dbh2pBhsKxR1dQM3In7-VURX72SJUMYy5cSD5wwQIwLIpgRNwgH8_lm8NNKTDBSHhR2WDtanXx60rKvjjNJbiX0MgFvvDH94sHpXHG6A4HaGF1dGhEYXRhWJhkL_D9XNLRHqMZoGbUoQMaXmUwQR9RoCNKlcs30mZ5ZUUAAAAA8kqOcNDT-CwpNzJSPMTeWgAU9VV9hvzNLUwsivnss8jRvuAfbZ2lAQIDJiABIVggKQD79-GZrmE9sJoNXicgksjkecZ6C4S8pLZ_8K4tnyAiWCB4_o7RK_AnYzETy94VCDuqWGAfc-Z1eQR73D45kEMP4Q",
        },
        "getClientExtensionResults": {},
        "id": "9VV9hvzNLUwsivnss8jRvuAfbZ0",
        "type": "public-key"
    };

    savePublicKey(): Observable<any> {
        console.log(this.mockData);
        const array = [163,99,102,109,116,101,97,112,112,108,101,103,97,116,116,83,116,109,116,161,99,120,53,99,130,89,2,71,48,130,2,67,48,130,1,201,160,3,2,1,2,2,6,1,125,235,14,237,253,48,10,6,8,42,134,72,206,61,4,3,2,48,72,49,28,48,26,6,3,85,4,3,12,19,65,112,112,108,101,32,87,101,98,65,117,116,104,110,32,67,65,32,49,49,19,48,17,6,3,85,4,10,12,10,65,112,112,108,101,32,73,110,99,46,49,19,48,17,6,3,85,4,8,12,10,67,97,108,105,102,111,114,110,105,97,48,30,23,13,50,49,49,50,50,51,48,54,48,57,50,51,90,23,13,50,49,49,50,50,54,48,54,48,57,50,51,90,48,129,145,49,73,48,71,6,3,85,4,3,12,64,53,97,56,55,99,101,52,98,49,97,50,101,55,51,97,48,54,102,48,54,56,52,102,53,100,52,51,100,97,52,48,101,53,98,50,56,56,52,50,53,57,99,55,97,50,54,55,54,51,102,100,101,101,57,49,49,53,100,98,54,54,99,97,97,49,26,48,24,6,3,85,4,11,12,17,65,65,65,32,67,101,114,116,105,102,105,99,97,116,105,111,110,49,19,48,17,6,3,85,4,10,12,10,65,112,112,108,101,32,73,110,99,46,49,19,48,17,6,3,85,4,8,12,10,67,97,108,105,102,111,114,110,105,97,48,89,48,19,6,7,42,134,72,206,61,2,1,6,8,42,134,72,206,61,3,1,7,3,66,0,4,23,238,62,130,14,151,208,210,23,108,200,101,17,49,30,96,236,51,157,148,34,229,189,125,251,90,238,23,249,9,51,81,179,119,202,146,81,134,118,134,136,69,223,81,96,221,124,213,51,34,252,61,54,130,112,207,119,242,242,27,98,43,208,15,163,85,48,83,48,12,6,3,85,29,19,1,1,255,4,2,48,0,48,14,6,3,85,29,15,1,1,255,4,4,3,2,4,240,48,51,6,9,42,134,72,134,247,99,100,8,2,4,38,48,36,161,34,4,32,51,43,185,21,93,240,180,57,16,187,3,77,37,133,207,2,232,208,143,230,183,41,190,165,91,236,215,72,124,122,179,174,48,10,6,8,42,134,72,206,61,4,3,2,3,104,0,48,101,2,49,0,156,6,59,45,167,132,180,233,245,129,93,77,48,145,30,76,67,187,69,73,234,99,250,17,44,222,4,233,183,1,97,207,11,30,150,163,88,181,254,14,159,187,97,36,40,75,82,13,2,48,35,23,96,75,228,62,57,66,116,8,158,209,72,213,71,105,45,40,225,242,113,226,160,196,1,117,160,123,55,163,7,112,130,24,220,39,188,36,202,149,61,217,0,138,165,181,188,94,89,2,56,48,130,2,52,48,130,1,186,160,3,2,1,2,2,16,86,37,83,149,199,167,251,64,235,226,40,216,38,8,83,182,48,10,6,8,42,134,72,206,61,4,3,3,48,75,49,31,48,29,6,3,85,4,3,12,22,65,112,112,108,101,32,87,101,98,65,117,116,104,110,32,82,111,111,116,32,67,65,49,19,48,17,6,3,85,4,10,12,10,65,112,112,108,101,32,73,110,99,46,49,19,48,17,6,3,85,4,8,12,10,67,97,108,105,102,111,114,110,105,97,48,30,23,13,50,48,48,51,49,56,49,56,51,56,48,49,90,23,13,51,48,48,51,49,51,48,48,48,48,48,48,90,48,72,49,28,48,26,6,3,85,4,3,12,19,65,112,112,108,101,32,87,101,98,65,117,116,104,110,32,67,65,32,49,49,19,48,17,6,3,85,4,10,12,10,65,112,112,108,101,32,73,110,99,46,49,19,48,17,6,3,85,4,8,12,10,67,97,108,105,102,111,114,110,105,97,48,118,48,16,6,7,42,134,72,206,61,2,1,6,5,43,129,4,0,34,3,98,0,4,131,46,135,47,38,20,145,129,2,37,185,245,252,214,187,99,120,181,245,95,63,203,4,91,199,53,153,52,117,253,84,144,68,223,155,254,25,33,23,101,198,154,29,218,5,11,56,212,80,131,64,26,67,79,178,77,17,45,86,195,225,207,191,203,152,145,254,192,105,96,129,190,249,108,188,119,200,141,221,175,70,165,174,225,221,81,91,90,250,171,147,190,156,11,38,145,163,102,48,100,48,18,6,3,85,29,19,1,1,255,4,8,48,6,1,1,255,2,1,0,48,31,6,3,85,29,35,4,24,48,22,128,20,38,215,100,217,197,120,194,90,103,209,167,222,107,18,208,27,99,241,198,215,48,29,6,3,85,29,14,4,22,4,20,235,174,130,196,255,161,172,91,81,212,207,36,97,5,0,190,99,189,119,136,48,14,6,3,85,29,15,1,1,255,4,4,3,2,1,6,48,10,6,8,42,134,72,206,61,4,3,3,3,104,0,48,101,2,49,0,221,139,26,52,129,165,250,217,219,180,231,101,123,132,30,20,76,39,183,91,135,106,65,134,194,177,71,87,80,51,114,39,239,229,84,69,126,246,72,149,12,99,46,92,72,62,112,193,2,48,44,138,96,68,220,32,31,207,229,155,195,77,41,48,193,72,120,81,217,96,237,106,117,241,235,74,202,190,56,205,37,184,151,208,200,5,190,240,199,247,139,7,165,113,198,232,14,7,104,97,117,116,104,68,97,116,97,88,152,100,47,240,253,92,210,209,30,163,25,160,102,212,161,3,26,94,101,48,65,31,81,160,35,74,149,203,55,210,102,121,101,69,0,0,0,0,242,74,142,112,208,211,248,44,41,55,50,82,60,196,222,90,0,20,254,171,60,53,89,57,81,178,17,170,226,28,129,109,20,205,131,116,160,146,165,1,2,3,38,32,1,33,88,32,23,238,62,130,14,151,208,210,23,108,200,101,17,49,30,96,236,51,157,148,34,229,189,125,251,90,238,23,249,9,51,81,34,88,32,179,119,202,146,81,134,118,134,136,69,223,81,96,221,124,213,51,34,252,61,54,130,112,207,119,242,242,27,98,43,208,15];
        console.log(array);
        this.mockData.response.lalala = array;
        // const decodedClientDataJSON = this.mockService.base64urlDecode(this.mockData.response.clientDataJSON);
        // const a = this.mockService.arrayBufferToStr(decodedClientDataJSON);
        // console.log(a);
        // const decodedAttestationJSON = this.mockService.base64urlDecode(this.mockData.response.attestationObject);
        // const decodedAttestationObj: DecodedAttestionObj = CBOR.decode(decodedAttestationJSON);
        // console.log(decodedAttestationObj);
        this.url = `${this.baseUrl}/save-public-key`;
        return this.http.post<any>(this.url, this.mockData);
    }
}
